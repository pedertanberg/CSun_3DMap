import{bb as V,t as A,is as J,fn as N,it as S,iu as R,iv as X,hd as j,hb as q,hy as b,hn as z,iw as B,ix as D,iy as p}from"./index.bd80e406.js";function Q(t){return k(t,!0)}function U(t){return k(t,!1)}function k(t,i){if(A(t))return null;const n=t.spatialReference,s=J(n),e="toJSON"in t?t.toJSON():t;if(!s)return e;const h=N(n)?102100:4326,u=S[h].maxX,_=S[h].minX;if(R(e))return T(e,u,_);if(X(e))return e.points=e.points.map(o=>T(o,u,_)),e;if(j(e))return E(e,s);if(q(e)||b(e)){const o=z(G,e),r={xmin:o[0],ymin:o[1],xmax:o[2],ymax:o[3]},x=p(r.xmin,_)*(2*u),m=x===0?e:B(e,x);return r.xmin+=x,r.xmax+=x,r.xmax>u?L(m,u,i):r.xmin<_?L(m,_,i):m}return e}function E(t,i){if(!i)return t;const n=F(t,i).map(s=>s.extent);return n.length<2?n[0]||t:n.length>2?(t.xmin=i.valid[0],t.xmax=i.valid[1],t):{rings:n.map(s=>[[s.xmin,s.ymin],[s.xmin,s.ymax],[s.xmax,s.ymax],[s.xmax,s.ymin],[s.xmin,s.ymin]])}}function T(t,i,n){if(Array.isArray(t)){const s=t[0];if(s>i){const e=p(s,i);t[0]=s+e*(-2*i)}else if(s<n){const e=p(s,n);t[0]=s+e*(-2*n)}}else{const s=t.x;if(s>i){const e=p(s,i);t.x+=e*(-2*i)}else if(s<n){const e=p(s,n);t.x+=e*(-2*n)}}return t}function F(t,i){const n=[],{ymin:s,ymax:e,xmin:h,xmax:u}=t,_=t.xmax-t.xmin,[o,r]=i.valid,{x,frameId:m}=w(t.xmin,i),{x:a,frameId:c}=w(t.xmax,i),M=x===a&&_>0;if(_>2*r){const g={xmin:h<u?x:a,ymin:s,xmax:r,ymax:e},O={xmin:o,ymin:s,xmax:h<u?a:x,ymax:e},P={xmin:0,ymin:s,xmax:r,ymax:e},C={xmin:o,ymin:s,xmax:0,ymax:e},f=[],y=[];v(g,P)&&f.push(m),v(g,C)&&y.push(m),v(O,P)&&f.push(c),v(O,C)&&y.push(c);for(let d=m+1;d<c;d++)f.push(d),y.push(d);n.push(new l(g,[m]),new l(O,[c]),new l(P,f),new l(C,y))}else x>a||M?n.push(new l({xmin:x,ymin:s,xmax:r,ymax:e},[m]),new l({xmin:o,ymin:s,xmax:a,ymax:e},[c])):n.push(new l({xmin:x,ymin:s,xmax:a,ymax:e},[m]));return n}function w(t,i){const[n,s]=i.valid,e=2*s;let h,u=0;return t>s?(h=Math.ceil(Math.abs(t-s)/e),t-=h*e,u=h):t<n&&(h=Math.ceil(Math.abs(t-n)/e),t+=h*e,u=-h),{x:t,frameId:u}}function v(t,i){const{xmin:n,ymin:s,xmax:e,ymax:h}=i;return I(t,n,s)&&I(t,n,h)&&I(t,e,h)&&I(t,e,s)}function I(t,i,n){return i>=t.xmin&&i<=t.xmax&&n>=t.ymin&&n<=t.ymax}function L(t,i,n=!0){const s=!b(t);if(s&&D(t),n)return new H().cut(t,i);const e=s?t.rings:t.paths,h=s?4:2,u=e.length,_=-2*i;for(let o=0;o<u;o++){const r=e[o];if(r&&r.length>=h){const x=[];for(const m of r)x.push([m[0]+_,m[1]]);e.push(x)}}return s?t.rings=e:t.paths=e,t}class l{constructor(i,n){this.extent=i,this.frameIds=n}}const G=V();class H{constructor(){this._linesIn=[],this._linesOut=[]}cut(i,n){let s;if(this._xCut=n,i.rings)this._closed=!0,s=i.rings,this._minPts=4;else{if(!i.paths)return null;this._closed=!1,s=i.paths,this._minPts=2}for(const h of s){if(!h||h.length<this._minPts)continue;let u=!0;for(const _ of h)u?(this.moveTo(_),u=!1):this.lineTo(_);this._closed&&this.close()}this._pushLineIn(),this._pushLineOut(),s=[];for(const h of this._linesIn)h&&h.length>=this._minPts&&s.push(h);const e=-2*this._xCut;for(const h of this._linesOut)if(h&&h.length>=this._minPts){for(const u of h)u[0]+=e;s.push(h)}return this._closed?i.rings=s:i.paths=s,i}moveTo(i){this._pushLineIn(),this._pushLineOut(),this._prevSide=this._side(i[0]),this._moveTo(i[0],i[1],this._prevSide),this._prevPt=i,this._firstPt=i}lineTo(i){const n=this._side(i[0]);if(n*this._prevSide==-1){const s=this._intersect(this._prevPt,i);this._lineTo(this._xCut,s,0),this._prevSide=0,this._lineTo(i[0],i[1],n)}else this._lineTo(i[0],i[1],n);this._prevSide=n,this._prevPt=i}close(){const i=this._firstPt,n=this._prevPt;i[0]===n[0]&&i[1]===n[1]||this.lineTo(i),this._checkClosingPt(this._lineIn),this._checkClosingPt(this._lineOut)}_moveTo(i,n,s){this._closed?(this._lineIn.push([s<=0?i:this._xCut,n]),this._lineOut.push([s>=0?i:this._xCut,n])):(s<=0&&this._lineIn.push([i,n]),s>=0&&this._lineOut.push([i,n]))}_lineTo(i,n,s){this._closed?(this._addPolyVertex(this._lineIn,s<=0?i:this._xCut,n),this._addPolyVertex(this._lineOut,s>=0?i:this._xCut,n)):s<0?(this._prevSide===0&&this._pushLineOut(),this._lineIn.push([i,n])):s>0?(this._prevSide===0&&this._pushLineIn(),this._lineOut.push([i,n])):this._prevSide<0?(this._lineIn.push([i,n]),this._lineOut.push([i,n])):this._prevSide>0&&(this._lineOut.push([i,n]),this._lineIn.push([i,n]))}_addPolyVertex(i,n,s){const e=i.length;e>1&&i[e-1][0]===n&&i[e-2][0]===n?i[e-1][1]=s:i.push([n,s])}_checkClosingPt(i){const n=i.length;n>3&&i[0][0]===this._xCut&&i[n-2][0]===this._xCut&&i[1][0]===this._xCut&&(i[0][1]=i[n-2][1],i.pop())}_side(i){return i<this._xCut?-1:i>this._xCut?1:0}_intersect(i,n){const s=(this._xCut-i[0])/(n[0]-i[0]);return i[1]+s*(n[1]-i[1])}_pushLineIn(){this._lineIn&&this._lineIn.length>=this._minPts&&this._linesIn.push(this._lineIn),this._lineIn=[]}_pushLineOut(){this._lineOut&&this._lineOut.length>=this._minPts&&this._linesOut.push(this._lineOut),this._lineOut=[]}}export{Q as a,U as p};
