import{nw as m,nx as g,ny as w,nz as f,nA as _,gK as T,r as d,s as S,c3 as I,bz as h,co as D,br as c,ab as y,e as o,f as s,dX as b,nB as x,nC as E,k as V,J as $}from"./index.f2e9cdcf.js";import{s as O}from"./ArcGISCachedService.88c9597d.js";import"./TilemapCache.396cb3f7.js";let a=class extends O(m(g(w(f($))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=_()}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}destroy(){this._lercDecoder=T(this._lercDecoder)}readVersion(e,r){let t=r.currentVersion;return t||(t=9.3),t}load(e){const r=d(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let i=0;i<t.typeKeywords.length;i++)if(t.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0;throw new S("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(I).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(e,r,t,i){const n=d((i=i||{signal:null}).signal)?i.signal:i.signal=new AbortController().signal,u={responseType:"array-buffer",signal:n},v={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(e,r,t,i)).then(()=>h(this.getTileUrl(e,r,t),u)).then(l=>this._lercDecoder.decode(l.data,v,n)).then(l=>{var p;return{values:l.pixelData,width:l.width,height:l.height,maxZError:(p=l.fileInfo)==null?void 0:p.maxZError,noDataValue:l.noDataValue,minValue:l.minValue,maxValue:l.maxValue}})}getTileUrl(e,r,t){const i=!this.tilemapCache&&this.supportsBlankTile,n=D({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${e}/${r}/${t}${n?"?"+n:""}`}async queryElevation(e,r){const{ElevationQuery:t}=await c(()=>import("./ElevationQuery.6dd08cb0.js"),["assets/ElevationQuery.6dd08cb0.js","assets/index.f2e9cdcf.js","assets/index.785c8c13.css"]);return y(r),new t().query(this,e,r)}async createElevationSampler(e,r){const{ElevationQuery:t}=await c(()=>import("./ElevationQuery.6dd08cb0.js"),["assets/ElevationQuery.6dd08cb0.js","assets/index.f2e9cdcf.js","assets/index.785c8c13.css"]);return y(r),new t().createSampler(this,e,r)}_fetchTileAvailability(e,r,t,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,r,t,i):Promise.resolve("unknown")}async _fetchImageService(e){var i;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await h(this.parsedUrl.path,r);t.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};o([s({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),o([s({readOnly:!0,type:x})],a.prototype,"heightModelInfo",void 0),o([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),o([s({type:["show","hide"]})],a.prototype,"listMode",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),o([s({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),o([s({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),o([s()],a.prototype,"sourceJSON",void 0),o([s({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),o([s(E)],a.prototype,"url",void 0),o([s()],a.prototype,"version",void 0),o([b("version",["currentVersion"])],a.prototype,"readVersion",null),a=o([V("esri.layers.ElevationLayer")],a),a.prototype.fetchTile.__isDefault__=!0;const U=a;export{U as default};
