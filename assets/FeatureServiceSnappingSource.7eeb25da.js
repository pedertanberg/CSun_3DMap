import{nl as N,t3 as x,t4 as U,aR as j,fr as A,e as r,f as s,k as _,m as O,r as u,bg as V,t as k,c4 as H,G as v,U as z,B as R,h as w,t5 as D,b as J,O as Z,i as G,gj as q,c2 as L,gp as W,eo as B,fk as Q,jS as K,aV as X,sk as Y,cG as ee,ab as C,t6 as te,eI as ie,px as ne,iq as P,t7 as re}from"./index.f489a479.js";import{y as se,E as ae}from"./elevationInfoUtils.a305fe10.js";import{r as oe,a as le}from"./queryEngineUtils.457c5236.js";import{b as de}from"./TileTreeDebugger.2975a242.js";import"./DimensionAnalysisView3D.2e5bf459.js";import"./LineVisualElement.e1071f16.js";import"./LengthDimension.d5ab9c1d.js";import"./Segment.bc0fe842.js";import"./analysisViewUtils.02c74237.js";import"./ImageMaterial.fd21e937.js";import"./Factory.3385d467.js";import"./PointVisualElement.3e2bc313.js";import"./RightAngleQuadVisualElement.b3cc24ae.js";import"./colorUtils.bb6424b7.js";import"./EditGeometryOperations.3dcd47a0.js";import"./QueryEngineResult.6da78303.js";import"./WhereClause.83a69ce6.js";import"./utils.247b8844.js";import"./generateRendererUtils.855b751b.js";import"./json.879c9adc.js";import"./dehydratedFeatureComparison.972cebd0.js";import"./RenderTexture.ad136b15.js";import"./VertexSnappingCandidate.6e947b5d.js";function I(e,t){return x(t.extent,E),U(E,j(pe,e.x,e.y,0))}const E=N(),pe=A();let y=class extends O{constructor(e){super(e),this.pointOfInterest=null}get tiles(){const e=this.tilesCoveringView,t=u(this.pointOfInterest)?this.pointOfInterest:this.view.center;return e.sort((i,o)=>I(t,i)-I(t,o)),e}_scaleEnabled(){return V(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||k(this.tileInfo))return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:t}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:i}=t,o=[];for(const{row:n,colFrom:d,colTo:a}of e)for(let l=d;l<=a;l++){const h=t.normalizeCol(l),m=new H(null,i,n,h);this.tileInfo.updateTileInfo(m),o.push(m)}return o}get tileInfo(){var e,t;return(t=(e=this.view.featuresTilingScheme)==null?void 0:e.tileInfo)!=null?t:null}get tileSize(){return u(this.tileInfo)?this.tileInfo.size[0]:256}initialize(){this.addHandles(v(()=>{var e,t;return(t=(e=this.view)==null?void 0:e.state)==null?void 0:t.viewpoint},()=>this.notifyChange("tilesCoveringView"),z))}};r([s({readOnly:!0})],y.prototype,"tiles",null),r([s({readOnly:!0})],y.prototype,"_scaleEnabled",null),r([s({readOnly:!0})],y.prototype,"tilesCoveringView",null),r([s({readOnly:!0})],y.prototype,"tileInfo",null),r([s({readOnly:!0})],y.prototype,"tileSize",null),r([s({constructOnly:!0})],y.prototype,"view",void 0),r([s({constructOnly:!0})],y.prototype,"layer",void 0),r([s()],y.prototype,"pointOfInterest",void 0),y=r([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],y);let f=class extends R{constructor(e){super(e),this.pointOfInterest=null}get tiles(){const e=this.tilesCoveringView,t=this._effectivePointOfInterest;if(u(t)){const i=e.map(o=>I(t,o));for(let o=1;o<i.length;o++)if(i[o-1]>i[o])return e.sort((n,d)=>I(t,n)-I(t,d)),e.slice()}return e}get tilesCoveringView(){var e,t;return this._filterTiles((t=(e=this.view.featureTiles)==null?void 0:e.tiles)==null?void 0:t.toArray()).map(ue)}get tileInfo(){var e,t;return(t=(e=this.view.featureTiles)==null?void 0:e.tilingScheme.toTileInfo())!=null?t:null}get tileSize(){var e,t;return(t=(e=this.view.featureTiles)==null?void 0:e.tileSize)!=null?t:256}get _effectivePointOfInterest(){var t;const e=this.pointOfInterest;return u(e)?e:(t=this.view.pointsOfInterest)==null?void 0:t.focus.location}initialize(){this.handles.add(v(()=>this.view.featureTiles,e=>{this.handles.remove(F),e&&this.handles.add(e.addClient(),F)},w))}_filterTiles(e){return k(e)?[]:e.filter(t=>Math.abs(t.measures.screenRect[3]-t.measures.screenRect[1])>he&&t.measures.visibility===D.VISIBLE_ON_SURFACE)}};function ue({lij:[e,t,i],extent:o}){return new H(`${e}/${t}/${i}`,e,t,i,o)}r([s({readOnly:!0})],f.prototype,"tiles",null),r([s({readOnly:!0})],f.prototype,"tilesCoveringView",null),r([s({readOnly:!0})],f.prototype,"tileInfo",null),r([s({readOnly:!0})],f.prototype,"tileSize",null),r([s({constructOnly:!0})],f.prototype,"view",void 0),r([s()],f.prototype,"pointOfInterest",void 0),r([s()],f.prototype,"_effectivePointOfInterest",null),f=r([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],f);const he=50,F="feature-tiles";let b=class extends de{constructor(e){super(e),this._handles=new J}initialize(){const e=setInterval(()=>this._fetchDebugInfo(),2e3);this._handles.add(Z(()=>clearInterval(e)))}destroy(){this._handles.destroy()}getTiles(){if(!this._debugInfo)return[];const e=new Map,t=new Map;this._debugInfo.storedTiles.forEach(n=>{e.set(n.data.id,n.featureCount)}),this._debugInfo.pendingTiles.forEach(n=>{e.set(n.data.id,n.featureCount),t.set(n.data.id,n.state)});const i=n=>{var l;const d=t.get(n),a=(l=e.get(n))!=null?l:"?";return d?`${d}:${a}
${n}`:`store:${a}
${n}`},o=new Map;return this._debugInfo.storedTiles.forEach(n=>{o.set(n.data.id,n.data)}),this._debugInfo.pendingTiles.forEach(n=>{o.set(n.data.id,n.data)}),Array.from(o.values()).map(n=>({lij:[n.level,n.row,n.col],geometry:G.fromExtent(q(n.extent,this.view.spatialReference)),label:i(n.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(e=>{this._debugInfo=e,this.update()})}};r([s({constructOnly:!0})],b.prototype,"handle",void 0),b=r([_("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],b);let p=class extends R{constructor(e){super(e),this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async t=>{const i=[];for(const{points:o}of t)for(const{z:n}of o)i.push(n);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this._editId=0}get updating(){return this.updatingHandles.updating||this._workerHandleUpdating}destroy(){this._workerHandle.destroy()}initialize(){this._workerHandle=new ce(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.points,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.handles.add([this._workerHandle.on("notify-updating",({updating:e})=>this._workerHandleUpdating=e),this._workerHandle.on("notify-availability",({availability:e})=>this._set("availability",e))])}async setup(e,t){var n;const i=this._serviceInfoFromLayer(e.layer);if(k(i))return;const o={configuration:this._convertConfiguration(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:(n=e.layer.elevationInfo)==null?void 0:n.toJSON()};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",o,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=this._convertConfiguration(e);await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const i={distance:e.distance,point:e.coordinateHelper.vectorToPoint(e.point).toJSON(),types:e.types,filter:u(e.filter)?e.filter.toJSON():null};return this._workerHandle.invoke(i,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:u(e.tileInfo)?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async applyEdits(e,t){var a,l,h,m,T,$;const i=this._editId++,o={id:i};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",o,t));const n=await this.updatingHandles.addPromise(L(e.result,t)),d={id:i,edits:{addedFeatures:(l=(a=n.addedFeatures)==null?void 0:a.map(({objectId:S})=>S).filter(u))!=null?l:[],deletedFeatures:(m=(h=n.deletedFeatures)==null?void 0:h.map(({objectId:S,globalId:M})=>({objectId:S,globalId:M})))!=null?m:[],updatedFeatures:($=(T=n.updatedFeatures)==null?void 0:T.map(({objectId:S})=>S).filter(u))!=null?$:[]}};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",d,t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}_convertConfiguration(e){return{filter:u(e.filter)?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}_serviceInfoFromLayer(e){var t,i,o;return e.geometryType==="multipatch"||e.geometryType==="mesh"?null:{url:(i=(t=e.parsedUrl)==null?void 0:t.path)!=null?i:"",fields:e.fields.map(n=>n.toJSON()),geometryType:W.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:(o=e.timeInfo)==null?void 0:o.toJSON()}}};r([s({constructOnly:!0})],p.prototype,"schedule",void 0),r([s({constructOnly:!0})],p.prototype,"hasZ",void 0),r([s({constructOnly:!0})],p.prototype,"elevationAlignPointsInFeatures",void 0),r([s({constructOnly:!0})],p.prototype,"queryForSymbologySnapping",void 0),r([s({readOnly:!0})],p.prototype,"updating",null),r([s({readOnly:!0})],p.prototype,"availability",void 0),r([s()],p.prototype,"_workerHandleUpdating",void 0),p=r([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],p);class ce extends B{constructor(t,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:i})}}let g=class extends O{constructor(e){super(e),this.pointOfInterest=null}get tiles(){return[new H("0/0/0",0,0,0,Q(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new K({origin:new X({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new Y({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}};r([s({readOnly:!0})],g.prototype,"tiles",null),r([s({readOnly:!0})],g.prototype,"tileInfo",null),r([s({readOnly:!0})],g.prototype,"tileSize",null),r([s({constructOnly:!0})],g.prototype,"layer",void 0),r([s()],g.prototype,"pointOfInterest",void 0),g=r([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],g);let c=class extends ee(O){constructor(e){super(e)}get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){return this._workerHandle.updating||this.updatingHandles.updating}get configuration(){const{view:e}=this,t=u(e)?e.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:t}}get availability(){return this._workerHandle.availability}get _layer(){return this.layerSource.layer}initialize(){var t;const e=this.view;if(u(e))switch(e.type){case"2d":this._tilesOfInterest=new y({view:e,layer:this._layer}),this._workerHandle=new p;break;case"3d":{const{resourceController:i}=e,o=this._layer,n=e.whenLayerView(o);this._tilesOfInterest=new f({view:e}),this._workerHandle=new p({schedule:a=>i.schedule(a),hasZ:this._layer.hasZ&&((t=this._layer.returnZ)!=null?t:!0),elevationAlignPointsInFeatures:async(a,l)=>{const h=await n;return C(l),h.elevationAlignPointsInFeatures(a,l)},queryForSymbologySnapping:async(a,l)=>{const h=await n;return C(l),h.queryForSymbologySnapping(a,l)}});const d=new te(null);n.then(a=>d.set(a)),this.addHandles([e.elevationProvider.on("elevation-change",({context:a})=>{var h;const{elevationInfo:l}=o;se(a,l)&&((h=this._workerHandle)==null||h.notifyElevationSourceChange())}),v(()=>o.elevationInfo,()=>{var a;return(a=this._workerHandle)==null?void 0:a.notifyElevationSourceChange()},w),v(()=>ie(d.get(),({processor:a})=>a==null?void 0:a.renderer),()=>{var a;return(a=this._workerHandle)==null?void 0:a.notifySymbologyChange()},w),v(()=>ne(d.get(),!1,a=>a.symbologySnappingSupported),a=>{var l;return(l=this._workerHandle)==null?void 0:l.setSymbologySnappingSupported(a)},w)]);break}}else this._tilesOfInterest=new g({layer:this._layer}),this._workerHandle=new p;this.handles.add([P(this._workerHandle)]),this._workerHandle.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null),this.updatingHandles.add(()=>this._updateTilesParameters,()=>this._workerHandle.updateTiles(this._updateTilesParameters,null),w),this.handles.add([v(()=>this.configuration,i=>this._workerHandle.configure(i,null),z)]),u(e)&&this.handles.add(v(()=>re.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,i=>{i&&!this._debug?(this._debug=new b({view:e,handle:this._workerHandle}),this.handles.add(P(this._debug),"debug")):!i&&this._debug&&this.handles.remove("debug")},w)),this.handles.add(this.layerSource.layer.on("apply-edits",i=>{this._workerHandle.applyEdits(i,null)}))}refresh(){this._workerHandle.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:i,elevationInfo:o,point:n}=e;this._tilesOfInterest.pointOfInterest=i.vectorToPoint(n);const d=i.hasZ()?ae:o,a=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map(l=>oe(l,i,d,a))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}get _getGroundElevation(){return le(this.view)}};r([s({constructOnly:!0})],c.prototype,"spatialReference",void 0),r([s({constructOnly:!0})],c.prototype,"layerSource",void 0),r([s({constructOnly:!0})],c.prototype,"view",void 0),r([s()],c.prototype,"_tilesOfInterest",void 0),r([s({readOnly:!0})],c.prototype,"_updateTilesParameters",null),r([s({readOnly:!0})],c.prototype,"updating",null),r([s({readOnly:!0})],c.prototype,"configuration",null),r([s({readOnly:!0})],c.prototype,"availability",null),r([s()],c.prototype,"_getGroundElevation",null),c=r([_("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],c);export{c as FeatureServiceSnappingSource};
